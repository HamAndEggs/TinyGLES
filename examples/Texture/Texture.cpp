#include "TinyGLES.h"
#include "TinyPNG.h"

#include <iostream>
#include <assert.h>

static uint32_t LoadTexture(tinygles::GLES &GL,const char* pFilename)
{
        // Load in a test texture
    uint32_t textureHandle = 0;
    tinypng::Loader png(true);
    if( png.LoadFromFile(pFilename) )
    {
        if( png.GetHasAlpha() )
        {
            std::vector<uint8_t> RGBA;
            png.GetRGBA(RGBA);
            textureHandle = GL.CreateTextureRGBA(png.GetWidth(),png.GetHeight(),RGBA.data());
        }
        else
        {
            std::vector<uint8_t> RGB;
            png.GetRGB(RGB);
            textureHandle = GL.CreateTextureRGB(png.GetWidth(),png.GetHeight(),RGB.data());
        }
    }
    assert(textureHandle);

    return textureHandle;
}

int main(int argc, char *argv[])
{
// Say hello to the world!
    std::cout << "Hello world, a skeleton app generated by appbuild.\n";

// Display the constants defined by app build. \n";
    std::cout << "Application Version " << APP_VERSION << '\n';
    std::cout << "Build date and time " << APP_BUILD_DATE_TIME << '\n';
    std::cout << "Build date " << APP_BUILD_DATE << '\n';
    std::cout << "Build time " << APP_BUILD_TIME << '\n';

    tinygles::GLES GL(true);

    // Load in a test texture
    uint32_t create = LoadTexture(GL,"crate.png");
    uint32_t plant = LoadTexture(GL,"plant.png");

    int anim = 0;
    std::cout << "Starting render loop\n";
    while( GL.BeginFrame() )
    {
        anim++;
        GL.Clear(0,0,0);

        GL.FillRoundedRectangle(50,50,950,550,100,55,20,155);
        GL.DrawRoundedRectangle(50,50,950,550,100,255,255,255);

        GL.FillRectangle(100,100,400,400,255,255,255,255,create);
        GL.FillRectangle(500,100,800,400,255,255,255,255,plant);


        GL.EndFrame();

    }

    return EXIT_SUCCESS;
}
