#include "TinyGLES.h"
#include "../SupportCode/TinyPNG.h"

#include <iostream>
#include <assert.h>

static uint32_t LoadTexture(tinygles::GLES &GL,const char* pFilename,bool pFiltered = false)
{
        // Load in a test texture
    uint32_t textureHandle = 0;
    tinypng::Loader png(false);
    if( png.LoadFromFile(pFilename) )
    {
        if( png.GetHasAlpha() )
        {
            std::vector<uint8_t> RGBA;
            png.GetRGBA(RGBA);
            textureHandle = GL.CreateTexture(png.GetWidth(),png.GetHeight(),RGBA.data(),tinygles::TextureFormat::FORMAT_RGBA,pFiltered);
        }
        else
        {
            std::vector<uint8_t> RGB;
            png.GetRGB(RGB);
            textureHandle = GL.CreateTexture(png.GetWidth(),png.GetHeight(),RGB.data(),tinygles::TextureFormat::FORMAT_RGB,pFiltered);
        }
    }
    assert(textureHandle);

    return textureHandle;
}

static uint32_t LoadNinePatch(tinygles::GLES &GL,const char* pFilename,bool pFiltered = false)
{
        // Load in a test texture
    uint32_t textureHandle = 0;
    tinypng::Loader png(false);
    if( png.LoadFromFile(pFilename) )
    {
        if( png.GetHasAlpha() )
        {
            std::vector<uint8_t> RGBA;
            png.GetRGBA(RGBA);
            textureHandle = GL.CreateNinePatch(png.GetWidth(),png.GetHeight(),RGBA.data(),true);
        }
    }
    assert(textureHandle);

    return textureHandle;
}

int main(int argc, char *argv[])
{
// Say hello to the world!
    std::cout << "Hello world, a skeleton app generated by appbuild.\n";

// Display the constants defined by app build. \n";
    std::cout << "Application Version " << APP_VERSION << '\n';
    std::cout << "Build date and time " << APP_BUILD_DATE_TIME << '\n';
    std::cout << "Build date " << APP_BUILD_DATE << '\n';
    std::cout << "Build time " << APP_BUILD_TIME << '\n';

    tinygles::GLES GL;

    uint32_t greenButtonTexture = LoadTexture(GL,"../data/GreenButtonNotNinePinch.png");
    uint32_t Bird_by_Magnus = LoadTexture(GL,"../data/Bird_by_Magnus.png");

    uint32_t greenButtonNinePatch = LoadNinePatch(GL,"../data/GreenButton.png");

    int anim = 0;
    GL.FontSetScale(2);
    while( GL.BeginFrame() )
    {
        anim++;

        GL.Clear(Bird_by_Magnus);

        
        const tinygles::NinePatchDrawInfo& but1 = GL.DrawNinePatch(greenButtonNinePatch,100,10,6,6);
        const tinygles::NinePatchDrawInfo& but2 = GL.DrawNinePatch(greenButtonNinePatch,100,200,8,1);
        const tinygles::NinePatchDrawInfo& but3 = GL.DrawNinePatch(greenButtonNinePatch,100,300,20,1);

        const float bounceAnim = (1.0f + std::sin(anim*0.01f)) * 0.5f;// 0 - > 1 -> 0
        const float scale = 1.0f + bounceAnim*38.0f;

        GL.FillRectangle(100,400,100 + (61*scale*0.3f),400 + 65,greenButtonTexture);
        GL.FontPrint(100,420,"Without nine patch scaling");

        const tinygles::NinePatchDrawInfo& but5 = GL.DrawNinePatch(greenButtonNinePatch,100,500,scale,1);
        GL.FontPrint(100,520,"WITH! Nine patch scaling :)");

        GL.EndFrame();
    }

// And quit";
    return EXIT_SUCCESS;
}
